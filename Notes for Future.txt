Figuring out how to recover lost timing resolution by playing with algorithm (Looking primarily between 500 and 250, keep 1 Gsps for interest)
	Look at distributions of extracted times (histograms) to see if they're symmetric, multi-peaked, normal, etc., investigate biases (long tail on one side, not the other)
	Take extracted timing/timing bias (y-axis) vs. phase of sample clock (x-axis) 2D histogram, flat band -> no bias, wiggle -> bias
		If has bias, can paramaterize it to incorporate it
		How to know what phase is if random waveform comes in? (Don't really need to know)
			Some information in advance about pulse shape (pulse template/akin to pulse template), align to template to check timing for phase
	Think of any plots I could make to incorporate and think about what's going on here
	Rerun with no noise to look at phase on its own (can expect discreet peaks)
	Rerun with different samples of noise with same phase (one peak and seeing how much it widens)
	Look at waveform timing algorithm for why it "falls apart" as sample rate gets lower
	Include example waveforms at different timing and shapings
	Make sure filter (CFD, shaping) input for each point only depends on previous values (causality)
	Include paramters on plots, share for every set of parameters
	Use all integers for delay, only powers of 2 for boxcar and attenuation
	Make sure noise is being added correctly (before shaping)
	Map out stages again
	Boxcar average necessary for timing resolution with right filter? (Meant to help with noise adding after the shaping)